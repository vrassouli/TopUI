@page "/components/list-group"
@using TopUI.Blazor.Core;
@using TopUI.Blazor.Demo.Bootstrap.Shared;

<div class="row gap-2 gap-md-0 flex-nowrap">
    <div class="col-md order-1 order-md-0">
        <h4>List group</h4>
        <ListGroup @ref=_elRef @attributes=_parameters>
            <ListGroupItem Text="Item 1" />
            <ListGroupItem Text="Item 2" />
            <ListGroupItem Text="Item 3" />
        </ListGroup>

        <h3 class="mt-5">Usage:</h3>
<pre class="bg-body-tertiary p-2 rounded border">
    <code class="razor">
@TopUI.Blazor.Core.Generators.CodeGenerator.GenerateComponentInitializer(typeof(ListGroup), _parameters)
    </code>
</pre>

        <h4>Data bound list group</h4>
        <DataListGroup Items=_list
                       ItemText="x => x.Name"
                       class="mb-5" />

        <h4>Data bound list group with item template</h4>
        <DataListGroup Items=_list
                       ItemText="x => x.Name"
                       class="mb-5">
            <ItemTemplate>
                <div>
                    <h5>@context.Name (@context.CountryCode)</h5>
                    <small class="text-muted">@context.Capital</small>
                    <Badge Mode="BadgeModes.Info" Type="BadgeType.Pill" Message="@context.Population.ToString()" />
                </div>
            </ItemTemplate>
        </DataListGroup>
    </div>
    <div class="col-md-auto order-0 order-md-1">
        <PropertyGrid ValueSource="_elRef" PropertyValuesChanged="p => _parameters = p" class="mt-1">
        </PropertyGrid>
    </div>
</div>

@code {
    List<CountryDto> _list;
    private ListGroup? _elRef;
    private Dictionary<string, object?>? _parameters;

    public Index()
    {
        _list = CountryDto.GetList().ToList();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // Element references are captured after render.
        // So in order to pass the element reference to the PropertyGrid, we need to re-render after first render.
        if (firstRender)
            StateHasChanged();

        base.OnAfterRender(firstRender);
    }
}