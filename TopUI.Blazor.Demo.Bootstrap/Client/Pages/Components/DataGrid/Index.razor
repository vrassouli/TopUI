@page "/components/data-grid"

<div class="row gap-2 gap-md-0">
    <div class="col-md order-1 order-md-0 overflow-auto">
        <DataGrid class="border rounded"
                  @ref=_elRef
                  @attributes=_parameters
                  style="height: 250px;"
                  ItemsProvider="OnProvideGridItems"
                  PageSize="_pageSize"
                  Page="_page"
                  OnOrderBy="OnOrderBy">
            <Columns>
                <DataGridColumn Field="x => x.Name" Width="200">
                    <div>
                        <strong>@context.Name</strong> (@context.CallingCode)
                    </div>
                </DataGridColumn>
                <DataGridColumn Header="Code" Field="x => x.CountryCode" AllowResize="false" />
                <DataGridColumn Field="x => x.Population" />
                <DataGridColumn>
                    <Button Icon="bi bi-phone" Text="Call" Size="ButtonSizes.Small" />
                </DataGridColumn>
            </Columns>
        </DataGrid>
        <Pager @bind-Page=_page
               TotalPages="@((int)Math.Ceiling((double)(_list?.Count ?? 0)/_pageSize))"
               class="mt-2">

        </Pager>
        <h3 class="mt-5">Usage:</h3>
        <pre class="bg-body-tertiary p-2 rounded border">
        <code class="razor">
                @TopUI.Blazor.Core.Generators.CodeGenerator.GenerateComponentInitializer(typeof(DataGrid<CountryDto>), _parameters)
            </code>
        </pre>
    </div>
    <div class="col-md-auto order-0 order-md-1">
        <PropertyGrid ValueSource="_elRef" PropertyValuesChanged="p => _parameters = p" class="mt-1">
        </PropertyGrid>
    </div>
</div>


@code {
    private int _pageSize = 20;
    private int _page = 1;
    private DataGrid<CountryDto>? _elRef;
    private Dictionary<string, object?>? _parameters;
    private List<CountryDto>? _list;
    private OrderByCommand<CountryDto>? _orderBy;

    public Index()
    {
        BuildList();
    }

    private void BuildList()
    {
        _list = new List<CountryDto>();

        for (int i = 0; i < 1000; i++)
        {
            var rnd = new Random(i).Next(1, 10000);
            _list.Add(new CountryDto
                {
                    CallingCode = $"+{i}",
                    Capital = $"Capital {rnd}",
                    CountryCode = rnd.ToString(),
                    Name = $"Country {rnd}",
                    Population = new Random(rnd).Next(1, 10000)
                });
        }
    }

    private void OnOrderBy(OrderByCommand cmd)
    {
        if (cmd is OrderByCommand<CountryDto> generic)
        {
            _orderBy = generic;
        }
    }

    private ValueTask<ItemsProviderResult<CountryDto>> OnProvideGridItems(ItemsProviderRequest request)
    {
        var query = _list!.AsQueryable();

        if (_orderBy != null)
        {
            var exp = _orderBy.Expression;
            if (exp != null)
            {
                var func = exp.Compile();
                if (_orderBy.Direction == SortDirection.Ascending)
                    query = query.OrderBy(func).AsQueryable();
                else if (_orderBy.Direction == SortDirection.Descending)
                    query = query.OrderByDescending(func).AsQueryable();
            }
        }

        var list = query
            .Skip(request.StartIndex)
            .Take(request.Count);

        var result = new ItemsProviderResult<CountryDto>(list, _list!.Count);

        return ValueTask.FromResult(result);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // Element references are captured after render.
        // So in order to pass the element reference to the PropertyGrid, we need to re-render after first render.
        if (firstRender)
            StateHasChanged();

        base.OnAfterRender(firstRender);
    }
}
