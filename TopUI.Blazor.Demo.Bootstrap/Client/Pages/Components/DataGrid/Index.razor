@page "/components/data-grid"
@using TopUI.Blazor.Demo.Bootstrap.Shared;

<div class="row gap-2 gap-md-0">
    <div class="col-md order-1 order-md-0 overflow-auto">
        <DataGrid class="border rounded"
                  @ref=_elRef
                  @attributes=_parameters
                  style="height: 250px;"
                  ItemsProvider="OnProvideGridItems"
                  OnOrderBy="OnOrderBy">
            <Columns>
                <DataGridColumn Field="x => x.Name" Width="200">
                    <div>
                        <strong>@context.Name</strong> (@context.CallingCode)
                    </div>
                </DataGridColumn>
                <DataGridColumn Header="Code" Field="x => x.CountryCode" AllowResize="false" Width="200" />
                <DataGridColumn Field="x => x.Population" Width="200" />
                <DataGridColumn Width="200">
                    <Button Icon="bi bi-phone" Text="Call" Size="ButtonSizes.Small" />
                </DataGridColumn>
            </Columns>
            <RowHover>
                <div>Context of @context.Name</div>
            </RowHover>
        </DataGrid>
        <Pager @bind-Page=_page @bind-Page:after="ReadPage"
               TotalPages="_totalPages"
               class="mt-2">

        </Pager>
        <h3 class="mt-5">Usage:</h3>
        <pre class="bg-body-tertiary p-2 rounded border">
        <code class="razor">
                @TopUI.Blazor.Core.Generators.CodeGenerator.GenerateComponentInitializer(typeof(DataGrid<CountryDto>), _parameters)
            </code>
        </pre>
    </div>
    <div class="col-md-auto order-0 order-md-1">
        <PropertyGrid ValueSource="_elRef" PropertyValuesChanged="p => _parameters = p" class="mt-1">
        </PropertyGrid>
    </div>
</div>


@code {
    private int _pageSize = 50;
    private int _page = 1;
    private int _totalPages = 0;
    private DataGrid<CountryDto>? _elRef;
    private Dictionary<string, object?>? _parameters;
    private List<CountryDto>? _list;
    private OrderByCommand<CountryDto>? _orderBy;

    [Inject] private HttpClient Client { get; set; } = default!;

    public Index()
    {
        //_list = CountryDto.GetList().ToList();
        //_totalPages = (int)Math.Ceiling((double)_list.Count / _pageSize);
    }

    protected override async Task OnInitializedAsync()
    {
        await ReadPage();
        await base.OnInitializedAsync();
    }

    private void OnOrderBy(OrderByCommand cmd)
    {
        if (cmd is OrderByCommand<CountryDto> generic)
        {
            _orderBy = generic;
        }
    }

    private async Task ReadPage()
    {
        var page = await Client.GetFromJsonAsync<PagedList<CountryDto>>($"api/countries?skip={(_page - 1) * _pageSize}&take={_pageSize}");
        if (page != null)
        {
            _list = page.Items;
            _totalPages = (int)Math.Ceiling((double)page.Total / _pageSize);

            if (_elRef != null)
                await _elRef.RefreshAsync();
        }
    }

    private async ValueTask<ItemsProviderResult<CountryDto>> OnProvideGridItems(ItemsProviderRequest request)
    {
        //await Task.Delay(300);

        if (_list == null)
            return new ItemsProviderResult<CountryDto>(Enumerable.Empty<CountryDto>(), 0);

        var result = new ItemsProviderResult<CountryDto>(_list.Skip(request.StartIndex).Take(request.Count), _list.Count);

        return result;

    }

    protected override void OnAfterRender(bool firstRender)
    {
        // Element references are captured after render.
        // So in order to pass the element reference to the PropertyGrid, we need to re-render after first render.
        if (firstRender)
            StateHasChanged();

        base.OnAfterRender(firstRender);
    }
}
